View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
library(dplyr)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
View(datos)
View(datos)
library(dplyr)
library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
#
datos = datos %>%
filter(str_contains(Correo, "unal"))
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
library(dplyr)
library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
#
datos = datos %>%
filter(str_contains(Correo, "unal", ignore.case = TRUE))
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
#datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
datos = read_excel("Estaturas.xlsx")
library(dplyr)
library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(str_contains(Correo, "unal", ignore.case = TRUE))
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
#datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
datos = read_excel("Estaturas.xlsx")
library(dplyr)
library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(str_contains(Correo, "unal"))
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
#datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
datos = read_excel("Estaturas.xlsx")
library(dplyr)
#library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl(Correo, "unal"))
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
#datos = read_excel("Estatura estudiantes UNALMED (respuestas).xlsx")
datos = read_excel("Estaturas.xlsx")
library(dplyr)
#library(sjmisc)
# Transformar los datos
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("Estaturas.xlsx")
library(dplyr)
# Transformar los datos
# Cambiar los nombres de las variables
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
# Guardar los datos en formato .RData
save(datos, file = "Estaturas.RData")
View(datos)
View(datos)
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
#library(readxl)
#datos = read_excel("Estaturas.xlsx")
# Lectura de la base de datos en formato ".RData".
load("Estaturas.RData")
library(dplyr)
# Transformar los datos
# Cambiar los nombres de las variables
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
# Guardar los datos en formato .RData
#save(datos, file = "Estaturas.RData")
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("Estaturas.xlsx")
library(dplyr)
# Transformar los datos
# Cambiar los nombres de las variables
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
hist(datos$Estatura_estudiante, xlab = "Estatura (cm)", breaks = "Sturges",
col = "blue", freq = TRUE, ylab = "Frecuencias", main = "Histograma de frecuencia la estatura de los estudiantes(Cm)")
hist(datos$Estatura_estudiante, xlab = "Estatura (cm)", breaks = "Sturges",
col = "blue", freq = TRUE, ylab = "Frecuencias", main = "Histograma de frecuencia la estatura de los estudiantes")
axis(1, at=seq(130, 200, by = 10), labels = seq(130, 200, by = 10))
axis(2, at=seq(0, 50, by = 10), labels = seq(0, 50, by = 10))
library(ggplot2)
library(hrbrthemes)
ggplot(datos$Estatura_estudiante, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos$Estatura_estudiante, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=1) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=1)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=3)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200)
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = TRUE) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = FALSE) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = FALSE) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130, slope = 0) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130, slope = 1) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 140, slope = 1) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 140) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_madre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura de la madre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
