Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
# Guardar los datos en formato .RData
#save(datos, file = "Estaturas.RData")
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("Estaturas.xlsx")
library(dplyr)
# Transformar los datos
# Cambiar los nombres de las variables
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
hist(datos$Estatura_estudiante, xlab = "Estatura (cm)", breaks = "Sturges",
col = "blue", freq = TRUE, ylab = "Frecuencias", main = "Histograma de frecuencia la estatura de los estudiantes(Cm)")
hist(datos$Estatura_estudiante, xlab = "Estatura (cm)", breaks = "Sturges",
col = "blue", freq = TRUE, ylab = "Frecuencias", main = "Histograma de frecuencia la estatura de los estudiantes")
axis(1, at=seq(130, 200, by = 10), labels = seq(130, 200, by = 10))
axis(2, at=seq(0, 50, by = 10), labels = seq(0, 50, by = 10))
library(ggplot2)
library(hrbrthemes)
ggplot(datos$Estatura_estudiante, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos$Estatura_estudiante, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x=Sepal.Length, y=Sepal.Width, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= datos$Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=6) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=1) +
theme_ipsum()
library(ggplot2)
library(hrbrthemes)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=1)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size=3)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200)
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = TRUE) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = FALSE) +
xlab("Estatura del padre") +
xlim(150, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = FALSE) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130, slope = 0) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 130, slope = 1) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 140, slope = 1) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline(intercept = 140) +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_madre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura de la madre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
knitr::opts_chunk$set(echo = TRUE)
# Leer datos
library(readxl)
datos = read_excel("datos.xlsx")
library(dplyr)
# Transformar los datos
# Cambiar los nombres de las variables
nombres_originales = names(datos)
nombres_nuevos = c("Fecha", "Correo", "Sexo", "Edad", "Estatura_estudiante", "Estatura_madre",
"Estatura_padre")
names(datos) = nombres_nuevos
# Transformar las estaturas a variables numéricas; transformar el sexo a variable categórica
datos = transform(datos, Estatura_estudiante = as.numeric(Estatura_estudiante),
Estatura_madre = as.numeric(Estatura_madre),
Estatura_padre = as.numeric(Estatura_padre),
Sexo = as.factor(Sexo))
# Eliminar datos que no sirven (Estaturas de 0 o Edades menores a 18)
datos = datos %>%
filter(Edad >= 18 & Estatura_estudiante > 1 & Estatura_madre > 1 & Estatura_padre > 1)
# Estaturas de como 1.53 o 1.79 son posibles errores de digitación así que se multiplican por 100
datos = datos %>%
mutate(Estatura_estudiante = ifelse((Estatura_estudiante > 1 & Estatura_estudiante < 2),
Estatura_estudiante * 100, Estatura_estudiante)) %>%
mutate(Estatura_madre = ifelse((Estatura_madre > 1 & Estatura_madre < 2),
Estatura_madre * 100, Estatura_madre)) %>%
mutate(Estatura_padre = ifelse((Estatura_padre > 1 & Estatura_padre < 2),
Estatura_padre * 100, Estatura_padre))
# Transformar Edad a una variable categórica
datos = transform(datos, Edad = as.factor(Edad))
# Eliminar estaturas que no sirven (valores como 35)
datos = datos %>%
filter(Estatura_estudiante >= 100 & Estatura_madre >= 100 & Estatura_padre >= 100)
# Quedarnos solo con los que tengan correo institucional
datos = datos %>%
filter(grepl("unal", Correo))
summary(datos)
summary(datos %>%
filter(Sexo == "Hombre"))
summary(datos %>%
filter(Sexo == "Mujer"))
hist(datos$Estatura_estudiante, xlab = "Estatura (cm)", breaks = "Sturges",
col = "blue", freq = TRUE, ylab = "Frecuencias", main = "Histograma de frecuencia la estatura de los estudiantes")
axis(1, at=seq(130, 200, by = 10), labels = seq(130, 200, by = 10))
axis(2, at=seq(0, 50, by = 10), labels = seq(0, 50, by = 10))
library(ggplot2)
ggplot(datos, aes(x = Estatura_padre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura del padre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
library(ggplot2)
ggplot(datos, aes(x = Estatura_madre, y = Estatura_estudiante, color= Sexo)) +
geom_point(size = 2) +
geom_abline() +
xlab("Estatura de la madre") +
xlim(130, 200) +
ylab("Estatura del estudiante") +
ylim(130, 200)
plotMeans(datos$Estatura_estudiante, datos$Estatura_padre, datos$Estatura_padre,
error.bars="conf.int", level=0.95, connect=TRUE)
plotMeans(datos$Sexo, datos$Estatura_estudiante,
error.bars="conf.int", level=0.95, connect=TRUE)
install.packages('Rcmdr')
plotMeans(datos$Sexo, datos$Estatura_estudiante,
error.bars="conf.int", level=0.95, connect=TRUE)
#install.packages('Rcmdr')
library(Rcmdr)
plotMeans(datos$Sexo, datos$Estatura_estudiante,
error.bars="conf.int", level=0.95, connect=TRUE)
#install.packages('Rcmdr')
#(Rcmdr)
plotMeans(datos$Estatura_estudiante, datos$Sexo,
error.bars="conf.int", level=0.95, connect=TRUE)
#install.packages('Rcmdr')
#(Rcmdr)
plotMeans(datos$Estatura_estudiante %>% filter(Sexo == "Hombre"), datos$Estatura_padre,
error.bars="conf.int", level=0.95, connect=TRUE)
#install.packages('Rcmdr')
#(Rcmdr)
plotMeans(datos %>% filter(Sexo == "Hombre"), datos$Estatura_padre,
error.bars="conf.int", level=0.95, connect=TRUE)
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
plotmeans(datos$Edad ~ datos$Sexo)
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
plotmeans(datos.Edad ~ datos.Sexo)
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
with(datos, plotMeans(Estatura_estudiante, Sexo, Estatura_Padre))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
with(datos, plotMeans(Estatura_estudiante, Sexo, Estatura_padre))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
with(datos, plotMeans(Estatura_estudiante, Sexo, Edad))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
with(datos, plotMeans(Estatura_estudiante, Estatura_madre, Estatura_padre))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
with(datos, plotMeans(Estatura_estudiante, Sexo))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_estudiante, Sexo))
with(datos, plotMeans(Estatura_padre, Sexo))
with(datos, plotMeans(Estatura_madre, Sexo))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(140, 200)))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(140, 200)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(140, 200)))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(150, 180)))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(150, 180)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(150, 180)))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175)))
#install.packages('Rcmdr')
#(Rcmdr)
library(gplots)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175)))
#install.packages('Rcmdr')
library(Rcmdr)
install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(10)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175)))
#install.packages('Rcmdr')
library(Rcmdr)
install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, ylim=c(155, 175), col = viridis(1)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(1)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, xlab = "Sexo", ylab = "Estatura del padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, xlab = "Sexo (estudiante)", ylab = "Estatura del padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura del padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura del padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura de la madre", ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library("viridis")
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175), col = viridis(2)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175), col = "red"))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), col = viridis(2)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175), col = "blue"))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175)))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175)))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), error.bars= "conf.int", level=0.95, connect=TRUE))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), error.bars= "conf.int", level=0.95, connect=TRUE)))
#install.packages('Rcmdr')
library(Rcmdr)
#install.packages("viridis")  # Install
library(viridis)
par(mfrow = c(1, 3))
with(datos, plotMeans(Estatura_padre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura padre", ylim=c(155, 175), error.bars= "conf.int", level=0.95, connect=TRUE))
with(datos, plotMeans(Estatura_estudiante, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura estudiante", Sexo, ylim=c(155, 175), error.bars= "conf.int", level=0.95, connect=TRUE))
with(datos, plotMeans(Estatura_madre, Sexo, main = "Gráfico de medias", xlab = "Sexo (estudiante)",
ylab = "Estatura madre", ylim=c(155, 175), error.bars= "conf.int", level=0.95, connect=TRUE))
